name: Backend CI/CD

on:
  push:
    branches: [ master ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ master ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  # Allow manual triggering
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017

    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: |
        cd backend
        npm ci || npm install

    - name: Run linting
      run: |
        cd backend
        npm install eslint --save-dev
        npx eslint . --ext .js || echo "Linting completed with warnings"

    - name: Create .env file
      run: |
        cd backend
        echo "MONGODB_URI=mongodb://localhost:27017/attender" > .env
        echo "PORT=5000" >> .env
        echo "NODE_ENV=test" >> .env
        cat .env

    - name: Test connection to MongoDB
      run: |
        cd backend
        npm run test-connection || echo "MongoDB connection test failed but continuing workflow"

    # Run tests
    - name: Run tests
      run: |
        cd backend
        npm run test-workflow

    # Run attendance test
    - name: Run attendance test
      run: |
        cd backend
        npm run test-attendance || echo "Attendance test failed but continuing workflow"

  deploy:
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    # This is a placeholder for your deployment step
    # Replace with actual deployment to your hosting platform
    - name: Deploy to production
      run: |
        echo "Deploying backend to production..."
        # Add your deployment commands here
        # For example, if using Heroku:
        # - Install Heroku CLI
        # - Login to Heroku
        # - Push to Heroku
